* Chapter 6: Probability 
#+BEGIN_QUOTE
For our purposes you should think of probability as a way of quantifying the uncertainty associated with /events/ chosen from some /universe/ of events.
#+END_QUOTE
Observed events are subsets or samples of the universe of all possible events. 
** 6.1 Dependent and conditional probability
 Some events are independent (individual coin flips), whereas others are dependent (total number of heads in a sequence of coin flips). Formally, independent (combined) events have a probability that is the product of their independent (individual) probabilities. 

Events that have dependent or /conditional/ probabilities can be formally expressed as "the probability of B given A":
~P(A & B) = P(A | B)/P(A)~
The book continues with an example of the probability of the gender of a family's two children. The conditional probability that both children are girls is different between the two following conditions:
1. The first child is a girl
2. At least one child is a girl
The second has a probability of 1/3; the first has a probability of 1/2.
#+BEGIN_SRC scala

val rand = new scala.util.Random(0)
val randomKid = () => Vector("boy", "girl")(rand.nextInt(0, 2))
val addKids = (BothCount: Int, OlderGirlCount: Int, EitherGirlCount: Int) => {
  val older = randomKid()
  val younger = randomKid()
  if (older == "girl") {
    if (younger == "girl") {
      (BothCount + 1, OlderGirlCount + 1, EitherGirlCount)
     } else {
      (BothCount, OlderGirlCount + 1, EitherGirlCount + 1)
     }
  } else if (younger == "girl") {
    (BothCount, OlderGirlCount, EitherGirlCount + 1)
  } else (BothCount, OlderGirlCount, EitherGirlCount)
}
@tailrec
def getKids(iter): (Int, Int, Int) = {
  if (iter == 0) addKids(0,0,0)   
  else addKids(getKids(iter - 1):_*)
}
  
val kidCounts: (Int, Int, Int) = getKids(10000) 
 
#+END_SRC
Recursive and immutable rather than imperative and mutable, but similar in performance because of the tail-call optimization.
